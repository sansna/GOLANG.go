package main

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strings"
	//"time"
)

var reg_matchWxQQ *regexp.Regexp

var reg_reduplication *regexp.Regexp
var reg_quantifier *regexp.Regexp

//var reg_specialChars *regexp.Regexp

var replacer_digit *strings.Replacer
var replacer_punct *strings.Replacer

func main() {
	replacer_digit = strings.NewReplacer("0️⃣", "0", "1️⃣", "1", "2️⃣", "2", "3️⃣", "3", "4️⃣", "4", "5️⃣", "5", "6️⃣", "6", "7️⃣", "7", "8️⃣", "8", "9️⃣", "9", "🔟", "10", "⓪", "0", "①", "1", "②", "2", "③", "3", "④", "4", "⑤", "5", "⑥", "6", "⑦", "7", "⑧", "8", "⑨", "9", "⑩", "10", "⑪", "11", "⑫", "12", "⑬", "13", "⑭", "14", "⑮", "15", "⑯", "16", "⑰", "17", "⑱", "18", "⑲", "19", "⑳", "20", "⑴", "1", "⑵", "2", "⑶", "3", "⑷", "4", "⑸", "5", "⑹", "6", "⑺", "7", "⑻", "8", "⑼", "9", "⑽", "10", "⑾", "11", "⑿", "12", "⒀", "13", "⒁", "14", "⒂", "15", "⒃", "16", "⒄", "17", "⒅", "18", "⒆", "19", "⒇", "20", "⒈", "1", "⒉", "2", "⒊", "3", "⒋", "4", "⒌", "5", "⒍", "6", "⒎", "7", "⒏", "8", "⒐", "9", "⒑", "10", "⒒", "11", "⒓", "12", "⒔", "13", "⒕", "14", "⒖", "15", "⒗", "16", "⒘", "17", "⒙", "18", "⒚", "19", "⒛", "20", "❶", "1", "❷", "2", "❸", "3", "❹", "4", "❺", "5", "❻", "6", "❼", "7", "❽", "8", "❾", "9", "❿", "10", "➊", "1", "➋", "2", "➌", "3", "➍", "4", "➎", "5", "➏", "6", "➐", "7", "➑", "8", "➒", "9", "➓", "10", "⓿", "0", "⓵", "1", "⓶", "2", "⓷", "3", "⓸", "4", "⓹", "5", "⓺", "6", "⓻", "7", "⓼", "8", "⓽", "9", "⓾", "10", "⓫", "11", "⓬", "12", "⓭", "13", "⓮", "14", "⓯", "15", "⓰", "16", "⓱", "17", "⓲", "18", "⓳", "19", "⓴", "20", "㈠", "1", "㈡", "2", "㈢", "3", "㈣", "4", "㈤", "5", "㈥", "6", "㈦", "7", "㈧", "8", "㈨", "9", "㈩", "10", "０", "0", ">１", "1", "２", "2", "３", "3", "４", "4", "５", "5", "６", "6", "７", "7", "８", "8", "９", "9", "⁰", "0", "¹", "1", "²", "2", "³", "3", "⁴", "4", "⁵", "5", "⁶", "6", "⁷", "7", "⁸", "8", "⁹", "9", "₀", "0", "₁", "1", "₂", "2", "₃", "3", "₄", "4", "₅", "5", "₆", "6", "₇", "7", "₈", "8", "₉", "9", "零", "0", "一", "1", "二", "2", "三", "3", "四", "4", "五", "5", "六", "6", "七", "7", "八", "8", "九", "9", "〇", "0", "壹", "1", "贰", "2", "叁", "3", "肆", "4", "伍", "5", ">陆", "6", "柒", "7", "捌", "8", "玖", "9", "0️", "0", "1️", "1", "2️", "2", "3️", "3", "4️", "4", "5️", "5", "6️", "6", "7️", "7", "8️", "8", "9️", "9")
	//replacer_digit = strings.NewReplacer("⓪", "0", "①", "1", "②", "2", "③", "3", "④", "4", "⑤", "5", "⑥", "6", "⑦", "7", "⑧", "8", "⑨", "9", "⑩", "10", "⑪", "11", "⑫", "12", "⑬", "13", "⑭", "14", "⑮", "15", "⑯", "16", "⑰", "17", "⑱", "18", "⑲", "19", "⑳", "20", "⑴", "1", "⑵", "2", "⑶", "3", "⑷", "4", "⑸", "5", "⑹", "6", "⑺", "7", "⑻", "8", "⑼", "9", "⑽", "10", "⑾", "11", "⑿", "12", "⒀", "13", "⒁", "14", "⒂", "15", "⒃", "16", "⒄", "17", "⒅", "18", "⒆", "19", "⒇", "20", "⒈", "1", "⒉", "2", "⒊", "3", "⒋", "4", "⒌", "5", "⒍", "6", "⒎", "7", "⒏", "8", "⒐", "9", "⒑", "10", "⒒", "11", "⒓", "12", "⒔", "13", "⒕", "14", "⒖", "15", "⒗", "16", "⒘", "17", "⒙", "18", "⒚", "19", "⒛", "20", "❶", "1", "❷", "2", "❸", "3", "❹", "4", "❺", "5", "❻", "6", "❼", "7", "❽", "8", "❾", "9", "❿", "10", "➊", "1", "➋", "2", "➌", "3", "➍", "4", "➎", "5", "➏", "6", "➐", "7", "➑", "8", "➒", "9", "➓", "10", "⓿", "0", "⓵", "1", "⓶", "2", "⓷", "3", "⓸", "4", "⓹", "5", "⓺", "6", "⓻", "7", "⓼", "8", "⓽", "9", "⓾", "10", "⓫", "11", "⓬", "12", "⓭", "13", "⓮", "14", "⓯", "15", "⓰", "16", "⓱", "17", "⓲", "18", "⓳", "19", "⓴", "20", "㈠", "1", "㈡", "2", "㈢", "3", "㈣", "4", "㈤", "5", "㈥", "6", "㈦", "7", "㈧", "8", "㈨", "9", "㈩", "10", "０", "0", ">１", "1", "２", "2", "３", "3", "４", "4", "５", "5", "６", "6", "７", "7", "８", "8", "９", "9", "⁰", "0", "¹", "1", "²", "2", "³", "3", "⁴", "4", "⁵", "5", "⁶", "6", "⁷", "7", "⁸", "8", "⁹", "9", "₀", "0", "₁", "1", "₂", "2", "₃", "3", "₄", "4", "₅", "5", "₆", "6", "₇", "7", "₈", "8", "₉", "9", "零", "0", "一", "1", "二", "2", "三", "3", "四", "4", "五", "5", "六", "6", "七", "7", "八", "8", "九", "9", "〇", "0", "壹", "1", "贰", "2", "叁", "3", "肆", "4", "伍", "5", ">陆", "6", "柒", "7", "捌", "8", "玖", "9")
	reg_matchWxQQ = regexp.MustCompile("([0-9]{5,})|([a-zA-Z_-]{3,}[0-9]{1,}[a-zA-Z0-9]?)")
	reg_matchWxQQ.Longest()
	reg_reduplication = regexp.MustCompile("0{3,}|1{3,}|1{3,}|2{3,}|3{3,}|4{3,}|5{3,}|6{3,}|7{3,}|8{3,}|9{3,}")
	reg_quantifier = regexp.MustCompile("一个|一下|一样")
	replacer_punct = strings.NewReplacer("-", "", "_", "", "*", "", "+", "", "#", "", "@", "", "!", "", "$", "", ",", "", ".", "", "?", "", "`", "", "~", "", " ", "", "/", "", "\\", "", "q", "", "w", "", "x", "", "\r", "", "\n", "")
	//reg_specialChars = regexp.MustCompile("[-*_壱弐参⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛❶❷❸❹❺❻❼❽❾❿➊➋➌➍➎➏➐➑➒➓⓿⓵⓶⓷⓸⓹⓺⓻⓼⓽⓾⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩０１２３４５６７８９⁰¹²³⁴⁵⁶⁷⁸⁹₀₁₂₃₄₅₆₇₈₉零一二三四五六七八九〇壹贰叁肆伍陆柒捌玖]")
	scanner := bufio.NewScanner(os.Stdin)
	for scanner.Scan() {
		//now := time.Now()
		s := scanner.Text()

		dequantified_s := reg_quantifier.ReplaceAllString(s, "")
		replaced_s := replacer_digit.Replace(dequantified_s)
		deduped_s := reg_reduplication.ReplaceAllString(replaced_s, "")
		strip_s := replacer_punct.Replace(deduped_s)
		foundStr := string(reg_matchWxQQ.Find([]byte(strip_s)))
		if len([]rune(foundStr)) > 5 {
			lenstrip := float64(len([]rune(strip_s)))
			lenfound := float64(len([]rune(foundStr)))
			rate := (lenstrip - lenfound) / lenstrip
			if rate <= 0.4 {
				//hit
				fmt.Printf("%0.3v: %s\n", rate, s)
				//fmt.Printf("qs: %s\n", foundStr)
			}
		}
		//fmt.Println(time.Since(now))
	}
	return
}
